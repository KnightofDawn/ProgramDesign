package cn.miniword.biz;

import java.io.File;
import java.util.List;

import javax.swing.JOptionPane;

import cn.miniword.model.Coordinate;
import cn.miniword.model.edit.EditList;
import cn.miniword.util.FileUtility;

public class MiniwordController {
	private  String filePath = null;
	private boolean notSaved = false;
	private static final MiniwordController instance = new MiniwordController();
	private Coordinate clickPos = null;
	private char inputChar ;
	FrameController frameController = null;
	private List<String> content = null;
	
	public static enum EventType
	{
		NEW_FILE,SAVE_FILE,SAVE_AS,QUIT,OPEN_FILE,KEY_TYPED,MOUSE_CLICK
	}
	
	public void init()
	{
		frameController = new FrameController();
		notSaved = false;
	}
	
	public static MiniwordController getInstance()
	{
		return instance;
	}
	
	public void handleEvent(EventType event)
	{
		switch(event)
		{
		case NEW_FILE:
			newFile();
			break;
			
		case OPEN_FILE:
			openFile();
			break;
			
		case SAVE_FILE:
			saveFile();
			setNotSaved(false);
			break;
			
		case SAVE_AS:
			saveAs();
			setNotSaved(false);
			break;
			
		case QUIT:
			quit();
			break;
			
		case MOUSE_CLICK:
			calCursorCharPos();
			break;
			
		case KEY_TYPED:
			getTextAfterKeyTyped();
			setNotSaved(true);
			break;
			
		default:
			System.err.println("unknown handle event");
			break;
		}
	}

	private void newFile()
	{
		if(hasNotSaved() && confirmSave() == 1)
			saveFile();
		frameController.clear();
	}
	/**
	 * 打开文件
	 */
	private void openFile() {
		setNotSaved(true);
		if(hasNotSaved() && confirmSave() == 1)
			saveFile();
		File file = FileUtility.openFile();
		if(file != null){
			setFilePath(file.getAbsolutePath());
			//读取文件内容并在界面上显示。
			System.out.println("OpenFile::"+file.getAbsolutePath());
			frameController.clear();
			setContent(FileUtility.readFileContent(file));
			frameController.showText(getContent());
		}
	}

	/**
     * 保存文件
     */
	private void saveFile() {
		FileUtility.saveFile(filePath, getContent());
	}

	/**
	 * 文件另存为
	 */
	private void saveAs() {
		FileUtility.saveAs(getContent());
	}

	/**
	 * 退出系统，若退出前有未保存的编辑内容，需要先执行save操作再退出。
	 */
	private void quit() {
		if(hasNotSaved() && confirmSave() == 1)
			saveFile();
		System.exit(0);
	}
	
	private int confirmSave()
	{
		 int rst =  JOptionPane.showConfirmDialog(null, "是否保存当前文件？"); 
		 System.out.println(rst);
		 return rst;
	}
	
	/**
	 * @param c 鼠标点击的像素坐标
	 * 计算鼠标的字符坐标
	 * 刷新页面
	 */
	private void calCursorCharPos() {
		//通过像素坐标计算字符坐标。
		//界面刷新。
		//界面显示。
	}
	
	/**
	 * 调用模型层得到输入后的文本内容
	 */
	private void getTextAfterKeyTyped()
	{
		//调用接口得到更新后的文本内容
		EditList editor = new EditList();
//		editor.addChar(x, y, ch);
		//得到光标字符位置。
		//计算光标像素位置。
		//更新数据内容
		//在界面显示内容
	}

	private boolean hasNotSaved() {
		return notSaved;
	}

	private void setNotSaved(boolean notSaved) {
		this.notSaved = notSaved;
	}

	public String getFilePath() {
		return filePath;
	}

	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	

	public Coordinate getClickPos() {
		return clickPos;
	}

	public void setClickPos(Coordinate clickPos) {
		this.clickPos = clickPos;
	}

	public char getInputChar() {
		return inputChar;
	}

	public void setInputChar(char inputChar) {
		this.inputChar = inputChar;
	}
	
	public List<String> getContent() {
		return content;
	}
	
	public void setContent(List<String> content) {
		this.content = content;
	}
}
