package cn.miniword.biz;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import cn.miniword.model.Coordinate;
import cn.miniword.model.StringFinder;
import cn.miniword.model.edit.EditList;
import cn.miniword.util.EditUtility;
import cn.miniword.util.FileUtility;

public class MiniwordController extends Thread{
	private  String filePath = null;
	private boolean notSaved = false;
	private static final MiniwordController instance = new MiniwordController();
	private Coordinate cursorPixelCoo = null;
	private Coordinate cursorStringCoo = null;
	private char inputChar ;
	private FrameController frameController = null;
	private List<String> content = null;
	private boolean starFlag = false;
	private static final String defaultTile = "无标题 - Miniword";
	private EditList editor = new EditList();
	//定义可以接受的用户输入
	public static enum EventType
	{
		/*新建文件*/
		NEW_FILE,
		/*打开文件*/
		OPEN_FILE,
		/*保存文件*/
		SAVE_FILE,
		/*文件另存为*/
		SAVE_AS,
		/*退出*/
		QUIT,
		/*用户键盘输入单个字符*/
		KEY_TYPED,
		/*用户单击鼠标*/
		MOUSE_CLICK, 
		/*查找字符串*/
		FIND_STR
	}

	public void init()
	{
		frameController = new FrameController();
		notSaved = false;
		clear();
		start();
		handleEvent(EventType.NEW_FILE);
	}
	
	public void clear()
	{
		content = new ArrayList<String>();
		content.add("");
		cursorPixelCoo = FrameController.COO_BASE;
		cursorStringCoo = Coordinate.ZERO;
	}
	
	public static MiniwordController getInstance()
	{
		return instance;
	}
	
	public void handleEvent(EventType event)
	{
		switch(event)
		{
		case NEW_FILE:
			newFile();
			break;
			
		case OPEN_FILE:
			openFile();
			break;
			
		case SAVE_FILE:
			saveFile();
			break;
			
		case SAVE_AS:
			saveAs();
			break;
			
		case QUIT:
			quit();
			break;
			
		case MOUSE_CLICK:
			calCursorCharPos();
			break;
			
		case KEY_TYPED:
			getTextAfterKeyTyped();
			break;
			
		case FIND_STR:
			findString();
			break;
			
		default:
			System.err.println("unknown handle event");
			break;
		}
	}

	private void findString() {
		cursorStringCoo =new StringFinder(content,cursorStringCoo).findString();
		cursorPixelCoo = frameController.transferString2Pixel(cursorStringCoo, content);
		frameController.showCursor(cursorPixelCoo);
	}

	private void newFile()
	{
		if(querySave() != JOptionPane.CANCEL_OPTION){
			frameController.clear();
			clear();
			setNotSaveAndTitle(true, defaultTile);
			refreshFrame();
			frameController.setDefaultDimension();
			editor = new EditList();
		}
	}
	/**
	 * 打开文件
	 */
	private void openFile() {
		if(querySave() != JOptionPane.CANCEL_OPTION){
			File file = FileUtility.openFile();
			if(file != null){
				setFilePath(file.getAbsolutePath());
				//读取文件内容并在界面上显示。
				frameController.clear();
				setContent(FileUtility.readFileContent(file));
				frameController.showText(getContent());
				setNotSaveAndTitle(false, file.getName());
				refreshFrame();
				editor = EditUtility.listToEditList(content);
				frameController.setDimensionByContent(content);
			}
		}
	}

	/**
     * 保存文件
     */
	private void saveFile() {
		String fileName = FileUtility.saveFile(filePath, getContent());
		setNotSaveAndTitle(false, fileName);
		refreshFrame();
	}

	/**
	 * 文件另存为
	 */
	private void saveAs() {
		String fileName = FileUtility.saveAs(getContent());
		setNotSaveAndTitle(false, fileName);
		refreshFrame();
	}

	/**
	 * 退出系统，若退出前有未保存的编辑内容，需要先执行save操作再退出。
	 */
	private void quit() {
		if(querySave() != JOptionPane.CANCEL_OPTION)
			System.exit(0);
		else
			frameController.doNotCloseWindow();
	}
	
	private int querySave()
	{
		if(!hasNotSaved())
			return JOptionPane.NO_OPTION;
		int usrChoice = confirmSave();
		if(usrChoice == JOptionPane.YES_OPTION){
			saveFile();
			return JOptionPane.YES_OPTION;
		}
		return usrChoice;
	}
	
	private int confirmSave()
	{
		 int rst =  JOptionPane.showConfirmDialog(null, "是否保存当前文件？"); 
		 return rst;
	}
	
	/**
	 * @param c 鼠标点击的像素坐标
	 * 计算鼠标的字符坐标
	 * 刷新页面
	 */
	private void calCursorCharPos() {
		//通过像素坐标计算字符坐标。
		 cursorStringCoo = frameController.transferPixel2String(cursorStringCoo, content);
		 //界面清屏。
		 frameController.clear();
		//界面显示。
		 frameController.showText(content);
		 cursorPixelCoo = frameController.transferString2Pixel(cursorStringCoo, content);
		 frameController.showCursor(cursorPixelCoo);
	}
	
	/**
	 * 调用模型层得到输入后的文本内容以及光标位置
	 */
	private void getTextAfterKeyTyped()
	{
		//调用接口得到更新后的文本内容
		editor.addChar(cursorStringCoo.getX(), cursorStringCoo.getY(), inputChar);
		//更新数据内容
		content = editor.getBuffer();
		System.out.println(content);
		//得到光标字符位置。
		cursorStringCoo = editor.getMouse();
		System.out.println("StringPos::" + cursorStringCoo);
		//计算光标像素位置。
		cursorPixelCoo = frameController.transferString2Pixel(cursorStringCoo, content);
		//在界面显示内容
		refreshFrame();
		//设置标题和存储标志
		setNotSaveAndTitle(true, null);
		frameController.setDimensionByContent(content);
	}
	
	private void setNotSaveAndTitle(boolean notSaved, String titleName)
	{
		if(titleName == null)
			titleName = frameController.getTitle();
		setNotSaved(notSaved);
		if(hasNotSaved()){
			if(starFlag == false)
			{
				starFlag = true;
				frameController.setTitle(
						addStar(titleName, starFlag));
			}
		}
		else if(starFlag == true)
		{
			starFlag = false;
			frameController.setTitle(
					addStar(titleName, starFlag));
		}
	}
	
	public void refreshFrame()
	{
		frameController.clear();
		frameController.showText(content);
		frameController.showCursor(cursorPixelCoo);
	}
	
	
	private String addStar(String str,boolean starFlag)
	{
		String rst = str;
		if(starFlag)
			rst = "*" + str;
		else
			if(str.startsWith("*"))
				rst = str.substring(1);
		return rst;
	}

	private boolean hasNotSaved() {
		return notSaved;
	}

	private void setNotSaved(boolean notSaved) {
		this.notSaved = notSaved;
	}

	private String getFilePath() {
		return filePath;
	}

	private void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	

	private Coordinate getClickPos() {
		return cursorStringCoo;
	}

	public void setClickPos(Coordinate clickPos) {
		this.cursorStringCoo = clickPos;
	}

	private char getInputChar() {
		return inputChar;
	}

	public void setInputChar(char inputChar) {
		this.inputChar = inputChar;
	}
	
	private List<String> getContent() {
		return content;
	}
	
	private void setContent(List<String> content) {
		this.content = content;
	}

	public void run() {
		boolean showCursor = true;
		try {
			while(true){
				frameController.clear();
				frameController.showText(content);
				if(showCursor)
					frameController.showCursor(cursorPixelCoo);
				showCursor = !showCursor;
				Thread.sleep(700);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
}
